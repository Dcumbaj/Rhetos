
// WARNING: When modifying any part of this script, please also update the code samples in row permissions documentation.

//=========================================================
// Simple row permission rules:

    Module DemoRowPermissions1
    {
        Entity Division
        {
            ShortString Name;
        }
        
        Entity Employee
        {
            ShortString UserName;
            Reference Division;
        }
        
        Entity Document
        {
            ShortString Title;
            DateTime Created { CreationTime; }
            Reference Division;
            
            RowPermissions
            {
                Allow EmployeeDivision 'context =>
					{
						Guid myDivisionID = context.Repository.DemoRowPermissions1.Employee.Query()
							.Where(e => e.UserName == context.UserInfo.UserName)
							.Select(e => e.Division.ID)
							.SingleOrDefault();
						return item => item.Division.ID == myDivisionID;
					}';
            }
        }
    }

//=========================================================
// Combining multiple rules:

    Module DemoRowPermissions2
    {
        Entity Region
        {
            ShortString Name;
        }
        
        Entity Division
        {
            ShortString Name;
            Reference Region;
        }
        
        Entity Employee
        {
            ShortString UserName;
            Reference Division;
        }
        
        Entity RegionSupervisor
        {
            Reference Employee;
            Reference Region;
        }
        
        Entity Document
        {
            ShortString Title;
            DateTime Created { CreationTime; }
            Reference Division;

            RowPermissions
            {
                Allow EmployeeDivision 'context => 
					{
						Guid myDivisionID = context.Repository.DemoRowPermissions2.Employee.Query()
							.Where(e => e.UserName == context.UserInfo.UserName)
							.Select(e => e.Division.ID)
							.SingleOrDefault();
						return item => item.Division.ID == myDivisionID;
					}';
				
                AllowRead SupervisedRegions 'context =>
					{
						var myRegionIds = context.Repository.DemoRowPermissions2.RegionSupervisor.Query()
							.Where(rs => rs.Employee.UserName == context.UserInfo.UserName)
							.Select(rs => rs.Region.ID)
							.ToList();
						if (myRegionIds.Count == 0)
							return item => false;
						return item => myRegionIds.Contains(item.Division.Region.ID);
					}';
				
                DenyWrite BeforeCurrentYear 'context =>
					{
						return item => item.Created < new DateTime(DateTime.Today.Year, 1, 1);
					}';
            }
        }
    }

//=========================================================
// Inheriting row permissions:

    Module DemoRowPermissions2
    {
        AutoInheritRowPermissions;
        
        Browse DocumentBrowse DemoRowPermissions2.Document
        {
            Take 'Title';
            Take 'Division.Name';
        }
        
        Entity DocumentComment
        {
            Reference Document { Detail; }
            ShortString Comment;
        }
        
        Entity DocumentApproval  
        {
            Extends DemoRowPermissions2.Document;
            Reference ApprovedBy DemoRowPermissions2.Employee;
			ShortString Note;
			
            RowPermissions
            {
                // This rule is joined with the inherited rules from DemoRowPermissions2.Document.
                DenyWrite ApprovedByCurrentUser 'context =>
					{
						var myEmployeeId = context.Repository.DemoRowPermissions2.Employee.Query()
							.Where(e => e.UserName == context.UserInfo.UserName)
							.Select(e => e.ID)
							.SingleOrDefault();
						return item => item.ApprovedBy.ID != myEmployeeId;
					}';
            }
        }
    }
