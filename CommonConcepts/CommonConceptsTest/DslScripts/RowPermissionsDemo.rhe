
// WARNING: When modifying any part of this script, please also update the code samples in row permissions documentation.

//=========================================================
// Simple row permission rules:

    Module DemoRowPermissions1
    {
        Entity Division
        {
            ShortString Name;
        }
        
        Entity Employee
        {
            ShortString UserName;
            Reference Division;
        }
        
        Entity Document
        {
            ShortString Title;
            DateTime Created { CreationTime; }
            Reference Division;
            
            RowPermissions
            {
                Allow EmployeeDivision
                    'context => context.Repository.DemoRowPermissions1.Employee.Query()
                        .Where(u => u.UserName == context.UserInfo.UserName)
                        .Select(u => u.Division.ID)
                        .SingleOrDefault()'
                    'item => item.Division.ID == EmployeeDivision';
            }
        }
    }

//=========================================================
// Complex row permission rules:

    Module DemoRowPermissions2
    {
        Entity Region
        {
            ShortString Name;
        }
        
        Entity Division
        {
            ShortString Name;
            Reference Region;
        }
        
        Entity Employee
        {
            ShortString UserName;
            Reference Division;
        }
        
        Entity RegionSupervisor
        {
            Reference Employee;
            Reference Region;
        }
        
        Entity Document
        {
            ShortString Title;
            DateTime Created { CreationTime; }
            Reference Division;

            RowPermissions
            {
                Allow EmployeeDivision
                    'context => context.Repository.DemoRowPermissions2.Employee.Query()
                        .Where(u => u.UserName == context.UserInfo.UserName)
                        .Select(u => u.Division.ID)
                        .SingleOrDefault()' // Returns a Guid.
                    'item => item.Division.ID == EmployeeDivision';
                    
                AllowRead SupervisedRegions
                    'context => context.Repository.DemoRowPermissions2.RegionSupervisor.Query()
                        .Where(rs => rs.Employee.UserName == context.UserInfo.UserName)
                        .Select(rs => rs.Region.ID)
                        .ToList()' // Returns a list of Guids.
                    'item => SupervisedRegions.Contains(item.Division.Region.ID)'
                    'SupervisedRegions.Count > 0';
                    
                DenyWrite BeforeCurrentYear
                    'context => new DateTime(DateTime.Today.Year, 1, 1)'
                    'item => item.Created < BeforeCurrentYear';
            }
        }
    }

//=========================================================
// Inheriting row permissions:

    Module DemoRowPermissions2
    {
        AutoInheritRowPermissions;
        
        Browse DocumentBrowse DemoRowPermissions2.Document
        {
            Take 'Title';
            Take 'Division.Name';
        }
        
        Entity DocumentComment
        {
            Reference Document { Detail; }
            ShortString Comment;
        }
        
        Entity DocumentApproval  
        {
            Extends DemoRowPermissions2.Document;
            Reference ApprovedBy DemoRowPermissions2.Employee;
			ShortString Note;
			
            RowPermissions
            {
                // This rule is joined with the inherited rules from DemoRowPermissions2.Document.
                
                DenyWrite ApprovedByCurrentUser
                    'context => context.Repository.DemoRowPermissions2.Employee.Query()
                        .Where(u => u.UserName == context.UserInfo.UserName)
                        .Select(u => u.ID)
                        .SingleOrDefault()'
                    'item => item.ApprovedBy.ID != ApprovedByCurrentUser';
            }
        }
    }
