Module TestRowPermissions
{
	Entity NoRP
	{
		Integer value;
		ItemFilter Value30 'item => item.value > 30';
	}
	
	Entity SimpleRP
	{
		Integer value;
		RowPermissions '(source, repo, context) => source.Where(a => a.value >= 1500).Where(a => a.value <= 2500)';
		ItemFilter Value30 'item => item.value > 30';
	}
	
	Entity ComplexRP
	{
		Integer value;
		ItemFilter Value10 'item => item.value > 10';
	}
	
	Entity ComplexRPPermissions
	{
		ShortString userName;
		Integer minVal;
		Integer maxVal;
	}
	
	RowPermissions ComplexRP '(source, repos, context) =>
		{
			var perms = repos.TestRowPermissions.ComplexRPPermissions.Query().Where(a => a.userName == context.UserInfo.UserName).ToList().SingleOrDefault();
			if (perms == null) return new TestRowPermissions.ComplexRP [] { }.AsQueryable();
			
			return source.Where(a => a.value >= perms.minVal && a.value <= perms.maxVal);
		}';
	
	Browse SimpleRPBrowse TestRowPermissions.SimpleRP
	{
		Take Value2 value;
		RowPermissions '(source, repo, context) => source.Where(a => a.Base.value >= 1500).Where(a => a.Base.value <= 2500)';
	}
	
	Entity AutoFilter
	{
		ShortString Name;
		RowPermissions '(source, repository, context) =>
			{
				repository.Common.AddToLog.Execute(new Common.AddToLog {
					TableName = "TestRowPermissions.AutoFilter",
					Action = "RowPermissions filter" });
				
				return source.Where(item => item.Name.StartsWith("a"));
			}';
		ApplyFilterOnClientRead 'Common.RowPermissionsAllowedItems';
	}
	
	Entity ErrorData
	{
		ShortString Name;
		
		RowPermissions '(source, repos, context) =>
			{
				var items = source.ToList();
				if (items.Any(item => item.Name == "makeInvalidFilter"))
					return items.Concat(items).ToList().AsQueryable();
					
				return source;
			}';
		
		FilterBy 'System.String' '(repository, parameter) =>
			{
				var items = repository.TestRowPermissions.ErrorData.All();
				if (parameter == "duplicateSecondItem")
					return items.Concat(new[] { items[1] }).ToArray();
				if (parameter == "makeInvalidFilter")
					return items.Concat(new[] { new ErrorData { Name = "makeInvalidFilter" } }).ToArray();
				return items;
			}';
	}
	
	Entity RPRulesGroup { ShortString Name; }
	Entity RPRulesItem { ShortString Name; Reference Group TestRowPermissions.RPRulesGroup { Detail; } }
	
	Entity RpRulesAllowItem { ShortString UserName; Reference Item TestRowPermissions.RPRulesItem; }
	Entity RpRulesAllowGroup { ShortString UserName; Reference Group TestRowPermissions.RPRulesGroup; }
	Entity RpRulesDenyItem { ShortString UserName; Reference Item TestRowPermissions.RPRulesItem; }
	
	Entity RPRulesItem
	{
		RowPermissions
		{
			AllowRead DirectlyAlllowedItems
				'context.GenericRepository<RpRulesAllowItem>().Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Item.ID).ToList()'
				'item => DirectlyAlllowedItems.Contains(item.ID)'
				'DirectlyAlllowedItems.Count > 0';

			AllowRead DirectlyAlllowedGroups
				'context.GenericRepository<RpRulesAllowGroup>().Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Group.ID).ToList()'
				'item => DirectlyAlllowedGroups.Contains(item.Group.ID)'
				'DirectlyAlllowedGroups.Count > 0';
			
			AllowRead AllowedAllGroups
				'{
					int totalGroupsCount = context.GenericRepository<RPRulesGroup>().Query().Count();
					int allowedGroupsCount = context.GenericRepository<RpRulesAllowGroup>().Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Group.ID).Distinct().Count();
					return allowedGroupsCount == totalGroupsCount;
				}'
				'item => true' // This specific filter will be optimized. If it is active, there is no need to check other rules when querying RPRulesItem.
				'AllowedAllGroups';
			
			DenyRead DirectlyDeniedItems
				'context.GenericRepository<RpRulesDenyItem>().Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Item.ID).ToList()'
				'item => DirectlyDeniedItems.Contains(item.ID)'
				'DirectlyDeniedItems.Count > 0';
		}
	}
}
