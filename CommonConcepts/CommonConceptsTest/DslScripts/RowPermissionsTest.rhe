Module TestRowPermissions
{
	Entity NoRP
	{
		Integer value;
		ItemFilter Value30 'item => item.value > 30';
	}
	
	Entity SimpleRP
	{
		Integer value;
		RowPermissionsRead '(source, repo, context) => item => (item.value >= 1500) && (item.value <= 2500)';
		RowPermissionsWrite '(source, repo, context) => item => (item.value >= 500) && (item.value <= 3500)';
		ItemFilter Value30 'item => item.value > 30';
	}
		
	Entity ComplexRP
	{
		Integer value;
		ItemFilter Value10 'item => item.value > 10';
	}
	
	Entity ComplexRPPermissions
	{
		ShortString userName;
		Integer minVal;
		Integer maxVal;
	}
	
	RowPermissions ComplexRP '(source, repos, context) =>
		{
			var perms = repos.TestRowPermissions.ComplexRPPermissions.Query().Where(a => a.userName == context.UserInfo.UserName).ToList().SingleOrDefault();
			if (perms == null) return item => false;
			
			return item => (item.value >= perms.minVal) && (item.value <= perms.maxVal);
		}';
	
	Browse SimpleRPBrowse TestRowPermissions.SimpleRP
	{
		Take Value2 value;
		RowPermissionsRead '(source, repo, context) => item => (item.Base.value >= 1500) && (item.Base.value <= 2500)';
	}
	
	Entity AutoFilter
	{
		ShortString Name;
		RowPermissionsRead '(source, repository, context) =>
			{
				repository.Common.AddToLog.Execute(new Common.AddToLog {
					TableName = "TestRowPermissions.AutoFilter",
					Action = "RowPermissionsReadItems filter" });
				
				return item => item.Name.StartsWith("a");
			}';
		ApplyFilterOnClientRead 'Common.RowPermissionsReadItems';
	}

	Entity ErrorData
	{
		ShortString Name;
		
		RowPermissionsRead '(source, repos, context) =>
			{
				return item => true;
			}';
		
		FilterBy 'System.String' '(repository, parameter) =>
			{
				var items = repository.TestRowPermissions.ErrorData.All();
				if (parameter == "duplicateSecondItem")
					return items.Concat(new[] { items[1] }).ToArray();
				return items;
			}';
	}

	Entity RPRulesGroup { ShortString Name; }
	Entity RPRulesItem { ShortString Name; Reference Group TestRowPermissions.RPRulesGroup { Detail; } }
	
	Entity RpRulesAllowItem { ShortString UserName; Reference Item TestRowPermissions.RPRulesItem; }
	Entity RpRulesAllowGroup { ShortString UserName; Reference Group TestRowPermissions.RPRulesGroup; }
	Entity RpRulesDenyItem { ShortString UserName; Reference Item TestRowPermissions.RPRulesItem; }
	
	Entity RPRulesItem
	{
		RowPermissions
		{
			AllowRead DirectlyAlllowedItems
				'context.GenericRepository<RpRulesAllowItem>().Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Item.ID).ToList()'
				'item => DirectlyAlllowedItems.Contains(item.ID)'
				'DirectlyAlllowedItems.Count > 0';

			AllowRead DirectlyAlllowedGroups
				'context.GenericRepository<RpRulesAllowGroup>().Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Group.ID).ToList()'
				'item => DirectlyAlllowedGroups.Contains(item.Group.ID)'
				'DirectlyAlllowedGroups.Count > 0';
			
			AllowRead AllowedAllGroups
				'{
					int totalGroupsCount = context.GenericRepository<RPRulesGroup>().Query().Count();
					int allowedGroupsCount = context.GenericRepository<RpRulesAllowGroup>().Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Group.ID).Distinct().Count();
					return allowedGroupsCount == totalGroupsCount;
				}'
				'item => true' // This specific filter will be optimized. If it is active, there is no need to check other rules when querying RPRulesItem.
				'AllowedAllGroups';
			
			DenyRead DirectlyDeniedItems
				'context.GenericRepository<RpRulesDenyItem>().Query(rule => rule.UserName == context.UserInfo.UserName).Select(rule => rule.Item.ID).ToList()'
				'item => DirectlyDeniedItems.Contains(item.ID)'
				'DirectlyDeniedItems.Count > 0';
		}
	}
	
	Entity Parent
	{
		Integer value;
		RowPermissionsRead '(source, repo, context) => item => item.value > 100 && item.value < 200';
		RowPermissionsWrite '(source, repo, context) => item => item.value > 50 && item.value < 150';
	}
	
	Entity Child
	{
		Integer value;
		Reference MyParent TestRowPermissions.Parent;
		RowPermissions
		{
			InheritFrom TestRowPermissions.Child.MyParent;
			DenyRead Denied
				'new List<int?>() { 1, 2, 3 }'
				'item => Denied.Contains(item.value)';
		}
	}
	
	Entity Baby
	{
		Reference MyParent TestRowPermissions.Child;
		RowPermissions
		{
			InheritFrom TestRowPermissions.Baby.MyParent;
		}
	}

	Browse ParentBrowse TestRowPermissions.Parent
	{
		Take Value2 value;
		RowPermissions { InheritFromBase; }
	}
	

	// we test only write specific functionality, rules specific functionality is tested together with read rules
	Entity RPWriteRulesEmpty
	{
		RowPermissions
		{
			AllowRead AllowAll
			'0'
			'item => true';
		}
	}
	
	Entity RPWriteRules
	{
		Integer value;
		RowPermissions
		{
			AllowWrite AllowNoCondition
				'new List<int?>() { 1, 2, 3, 4, 5, 6, 7, 8, 9 }'
				'item => AllowNoCondition.Contains(item.value)';
				
			AllowWrite AllowCondition
				'true'
				'item => AllowCondition'
				'AllowCondition == false';
				
			DenyWrite DenyCondition
				'true'
				'item => item.value == 5'
				'DenyCondition == true';
				
			DenyWrite DenyNoCondition
				'new List<int?>() { 7, 8 }'
				'item => DenyNoCondition.Contains(item.value)';

			AllowWrite AllowConditionTrue
				'20'
				'item => item.value == 20'
				'AllowConditionTrue == 20';
		}
	}
}
